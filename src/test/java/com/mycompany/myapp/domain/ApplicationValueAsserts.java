package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ApplicationValueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationValueAllPropertiesEquals(ApplicationValue expected, ApplicationValue actual) {
        assertApplicationValueAutoGeneratedPropertiesEquals(expected, actual);
        assertApplicationValueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationValueAllUpdatablePropertiesEquals(ApplicationValue expected, ApplicationValue actual) {
        assertApplicationValueUpdatableFieldsEquals(expected, actual);
        assertApplicationValueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationValueAutoGeneratedPropertiesEquals(ApplicationValue expected, ApplicationValue actual) {
        assertThat(expected)
            .as("Verify ApplicationValue auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationValueUpdatableFieldsEquals(ApplicationValue expected, ApplicationValue actual) {
        assertThat(expected)
            .as("Verify ApplicationValue relevant properties")
            .satisfies(e -> assertThat(e.getApplicationValueId()).as("check applicationValueId").isEqualTo(actual.getApplicationValueId()))
            .satisfies(e -> assertThat(e.getKey()).as("check key").isEqualTo(actual.getKey()))
            .satisfies(e ->
                assertThat(e.getValueDate())
                    .as("check valueDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getValueDate())
            )
            .satisfies(e -> assertThat(e.getValueInt()).as("check valueInt").isEqualTo(actual.getValueInt()))
            .satisfies(e -> assertThat(e.getValueLong()).as("check valueLong").isEqualTo(actual.getValueLong()))
            .satisfies(e -> assertThat(e.getValueString()).as("check valueString").isEqualTo(actual.getValueString()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationValueUpdatableRelationshipsEquals(ApplicationValue expected, ApplicationValue actual) {
        // empty method
    }
}
