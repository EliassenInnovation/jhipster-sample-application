package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BlockReportPostAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockReportPostAllPropertiesEquals(BlockReportPost expected, BlockReportPost actual) {
        assertBlockReportPostAutoGeneratedPropertiesEquals(expected, actual);
        assertBlockReportPostAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockReportPostAllUpdatablePropertiesEquals(BlockReportPost expected, BlockReportPost actual) {
        assertBlockReportPostUpdatableFieldsEquals(expected, actual);
        assertBlockReportPostUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockReportPostAutoGeneratedPropertiesEquals(BlockReportPost expected, BlockReportPost actual) {
        assertThat(expected)
            .as("Verify BlockReportPost auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockReportPostUpdatableFieldsEquals(BlockReportPost expected, BlockReportPost actual) {
        assertThat(expected)
            .as("Verify BlockReportPost relevant properties")
            .satisfies(e -> assertThat(e.getBlockCategories()).as("check blockCategories").isEqualTo(actual.getBlockCategories()))
            .satisfies(e -> assertThat(e.getBlockingReason()).as("check blockingReason").isEqualTo(actual.getBlockingReason()))
            .satisfies(e -> assertThat(e.getPostBlockReportId()).as("check postBlockReportId").isEqualTo(actual.getPostBlockReportId()))
            .satisfies(e -> assertThat(e.getPostId()).as("check postId").isEqualTo(actual.getPostId()))
            .satisfies(e -> assertThat(e.getPostType()).as("check postType").isEqualTo(actual.getPostType()))
            .satisfies(e -> assertThat(e.getRequestedBy()).as("check requestedBy").isEqualTo(actual.getRequestedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockReportPostUpdatableRelationshipsEquals(BlockReportPost expected, BlockReportPost actual) {
        // empty method
    }
}
