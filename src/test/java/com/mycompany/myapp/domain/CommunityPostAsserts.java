package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CommunityPostAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityPostAllPropertiesEquals(CommunityPost expected, CommunityPost actual) {
        assertCommunityPostAutoGeneratedPropertiesEquals(expected, actual);
        assertCommunityPostAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityPostAllUpdatablePropertiesEquals(CommunityPost expected, CommunityPost actual) {
        assertCommunityPostUpdatableFieldsEquals(expected, actual);
        assertCommunityPostUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityPostAutoGeneratedPropertiesEquals(CommunityPost expected, CommunityPost actual) {
        assertThat(expected)
            .as("Verify CommunityPost auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityPostUpdatableFieldsEquals(CommunityPost expected, CommunityPost actual) {
        assertThat(expected)
            .as("Verify CommunityPost relevant properties")
            .satisfies(e -> assertThat(e.getCommunityPostId()).as("check communityPostId").isEqualTo(actual.getCommunityPostId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedOn()).as("check lastUpdatedOn").isEqualTo(actual.getLastUpdatedOn()))
            .satisfies(e -> assertThat(e.getPostTypeId()).as("check postTypeId").isEqualTo(actual.getPostTypeId()))
            .satisfies(e -> assertThat(e.getPrivacyTypeId()).as("check privacyTypeId").isEqualTo(actual.getPrivacyTypeId()))
            .satisfies(e -> assertThat(e.getSchoolDistrictId()).as("check schoolDistrictId").isEqualTo(actual.getSchoolDistrictId()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityPostUpdatableRelationshipsEquals(CommunityPost expected, CommunityPost actual) {
        // empty method
    }
}
