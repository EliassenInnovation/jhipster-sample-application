package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LoginHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoginHistoryAllPropertiesEquals(LoginHistory expected, LoginHistory actual) {
        assertLoginHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertLoginHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoginHistoryAllUpdatablePropertiesEquals(LoginHistory expected, LoginHistory actual) {
        assertLoginHistoryUpdatableFieldsEquals(expected, actual);
        assertLoginHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoginHistoryAutoGeneratedPropertiesEquals(LoginHistory expected, LoginHistory actual) {
        assertThat(expected)
            .as("Verify LoginHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoginHistoryUpdatableFieldsEquals(LoginHistory expected, LoginHistory actual) {
        assertThat(expected)
            .as("Verify LoginHistory relevant properties")
            .satisfies(e -> assertThat(e.getForgotPin()).as("check forgotPin").isEqualTo(actual.getForgotPin()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getLoginDate()).as("check loginDate").isEqualTo(actual.getLoginDate()))
            .satisfies(e -> assertThat(e.getLoginLogId()).as("check loginLogId").isEqualTo(actual.getLoginLogId()))
            .satisfies(e -> assertThat(e.getLoginType()).as("check loginType").isEqualTo(actual.getLoginType()))
            .satisfies(e -> assertThat(e.getLogOutDate()).as("check logOutDate").isEqualTo(actual.getLogOutDate()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoginHistoryUpdatableRelationshipsEquals(LoginHistory expected, LoginHistory actual) {
        // empty method
    }
}
