package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ManufacturerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManufacturerAllPropertiesEquals(Manufacturer expected, Manufacturer actual) {
        assertManufacturerAutoGeneratedPropertiesEquals(expected, actual);
        assertManufacturerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManufacturerAllUpdatablePropertiesEquals(Manufacturer expected, Manufacturer actual) {
        assertManufacturerUpdatableFieldsEquals(expected, actual);
        assertManufacturerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManufacturerAutoGeneratedPropertiesEquals(Manufacturer expected, Manufacturer actual) {
        assertThat(expected)
            .as("Verify Manufacturer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManufacturerUpdatableFieldsEquals(Manufacturer expected, Manufacturer actual) {
        assertThat(expected)
            .as("Verify Manufacturer relevant properties")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getGlnNumber()).as("check glnNumber").isEqualTo(actual.getGlnNumber()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getManufacturer()).as("check manufacturer").isEqualTo(actual.getManufacturer()))
            .satisfies(e -> assertThat(e.getManufacturerId()).as("check manufacturerId").isEqualTo(actual.getManufacturerId()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManufacturerUpdatableRelationshipsEquals(Manufacturer expected, Manufacturer actual) {
        // empty method
    }
}
