package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MonthlyNumbersAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyNumbersAllPropertiesEquals(MonthlyNumbers expected, MonthlyNumbers actual) {
        assertMonthlyNumbersAutoGeneratedPropertiesEquals(expected, actual);
        assertMonthlyNumbersAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyNumbersAllUpdatablePropertiesEquals(MonthlyNumbers expected, MonthlyNumbers actual) {
        assertMonthlyNumbersUpdatableFieldsEquals(expected, actual);
        assertMonthlyNumbersUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyNumbersAutoGeneratedPropertiesEquals(MonthlyNumbers expected, MonthlyNumbers actual) {
        assertThat(expected)
            .as("Verify MonthlyNumbers auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyNumbersUpdatableFieldsEquals(MonthlyNumbers expected, MonthlyNumbers actual) {
        assertThat(expected)
            .as("Verify MonthlyNumbers relevant properties")
            .satisfies(e -> assertThat(e.getActualMonthId()).as("check actualMonthId").isEqualTo(actual.getActualMonthId()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getEnrollment()).as("check enrollment").isEqualTo(actual.getEnrollment()))
            .satisfies(e ->
                assertThat(e.getFreeAndReducedPercent()).as("check freeAndReducedPercent").isEqualTo(actual.getFreeAndReducedPercent())
            )
            .satisfies(e -> assertThat(e.getiD()).as("check iD").isEqualTo(actual.getiD()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getMealsServed()).as("check mealsServed").isEqualTo(actual.getMealsServed()))
            .satisfies(e -> assertThat(e.getModifiedOn()).as("check modifiedOn").isEqualTo(actual.getModifiedOn()))
            .satisfies(e -> assertThat(e.getMonthId()).as("check monthId").isEqualTo(actual.getMonthId()))
            .satisfies(e -> assertThat(e.getNumberOfDistricts()).as("check numberOfDistricts").isEqualTo(actual.getNumberOfDistricts()))
            .satisfies(e -> assertThat(e.getNumberOfSites()).as("check numberOfSites").isEqualTo(actual.getNumberOfSites()))
            .satisfies(e -> assertThat(e.getRegDate()).as("check regDate").isEqualTo(actual.getRegDate()))
            .satisfies(e -> assertThat(e.getSchoolDistrictId()).as("check schoolDistrictId").isEqualTo(actual.getSchoolDistrictId()))
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyNumbersUpdatableRelationshipsEquals(MonthlyNumbers expected, MonthlyNumbers actual) {
        // empty method
    }
}
