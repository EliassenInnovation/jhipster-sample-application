package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductActivityHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductActivityHistoryAllPropertiesEquals(ProductActivityHistory expected, ProductActivityHistory actual) {
        assertProductActivityHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertProductActivityHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductActivityHistoryAllUpdatablePropertiesEquals(
        ProductActivityHistory expected,
        ProductActivityHistory actual
    ) {
        assertProductActivityHistoryUpdatableFieldsEquals(expected, actual);
        assertProductActivityHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductActivityHistoryAutoGeneratedPropertiesEquals(
        ProductActivityHistory expected,
        ProductActivityHistory actual
    ) {
        assertThat(expected)
            .as("Verify ProductActivityHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductActivityHistoryUpdatableFieldsEquals(ProductActivityHistory expected, ProductActivityHistory actual) {
        assertThat(expected)
            .as("Verify ProductActivityHistory relevant properties")
            .satisfies(e -> assertThat(e.getActivityId()).as("check activityId").isEqualTo(actual.getActivityId()))
            .satisfies(e -> assertThat(e.getActivityType()).as("check activityType").isEqualTo(actual.getActivityType()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getProductId()).as("check productId").isEqualTo(actual.getProductId()))
            .satisfies(e -> assertThat(e.getSuggestedProductId()).as("check suggestedProductId").isEqualTo(actual.getSuggestedProductId()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductActivityHistoryUpdatableRelationshipsEquals(
        ProductActivityHistory expected,
        ProductActivityHistory actual
    ) {
        // empty method
    }
}
