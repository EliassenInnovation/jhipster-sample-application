package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductAllergenBakAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllergenBakAllPropertiesEquals(ProductAllergenBak expected, ProductAllergenBak actual) {
        assertProductAllergenBakAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllergenBakAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllergenBakAllUpdatablePropertiesEquals(ProductAllergenBak expected, ProductAllergenBak actual) {
        assertProductAllergenBakUpdatableFieldsEquals(expected, actual);
        assertProductAllergenBakUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllergenBakAutoGeneratedPropertiesEquals(ProductAllergenBak expected, ProductAllergenBak actual) {
        assertThat(expected)
            .as("Verify ProductAllergenBak auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllergenBakUpdatableFieldsEquals(ProductAllergenBak expected, ProductAllergenBak actual) {
        assertThat(expected)
            .as("Verify ProductAllergenBak relevant properties")
            .satisfies(e -> assertThat(e.getAllergenId()).as("check allergenId").isEqualTo(actual.getAllergenId()))
            .satisfies(e -> assertThat(e.getAllergenGroup()).as("check allergenGroup").isEqualTo(actual.getAllergenGroup()))
            .satisfies(e -> assertThat(e.getAllergenName()).as("check allergenName").isEqualTo(actual.getAllergenName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getgTIN()).as("check gTIN").isEqualTo(actual.getgTIN()))
            .satisfies(e -> assertThat(e.getgTINUPC()).as("check gTINUPC").isEqualTo(actual.getgTINUPC()))
            .satisfies(e -> assertThat(e.getProductAllergenId()).as("check productAllergenId").isEqualTo(actual.getProductAllergenId()))
            .satisfies(e -> assertThat(e.getProductId()).as("check productId").isEqualTo(actual.getProductId()))
            .satisfies(e -> assertThat(e.getuPC()).as("check uPC").isEqualTo(actual.getuPC()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllergenBakUpdatableRelationshipsEquals(ProductAllergenBak expected, ProductAllergenBak actual) {
        // empty method
    }
}
