package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductBeforeApproveAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductBeforeApproveAllPropertiesEquals(ProductBeforeApprove expected, ProductBeforeApprove actual) {
        assertProductBeforeApproveAutoGeneratedPropertiesEquals(expected, actual);
        assertProductBeforeApproveAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductBeforeApproveAllUpdatablePropertiesEquals(ProductBeforeApprove expected, ProductBeforeApprove actual) {
        assertProductBeforeApproveUpdatableFieldsEquals(expected, actual);
        assertProductBeforeApproveUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductBeforeApproveAutoGeneratedPropertiesEquals(ProductBeforeApprove expected, ProductBeforeApprove actual) {
        assertThat(expected)
            .as("Verify ProductBeforeApprove auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductBeforeApproveUpdatableFieldsEquals(ProductBeforeApprove expected, ProductBeforeApprove actual) {
        assertThat(expected)
            .as("Verify ProductBeforeApprove relevant properties")
            .satisfies(e -> assertThat(e.getAddedSugar()).as("check addedSugar").isEqualTo(actual.getAddedSugar()))
            .satisfies(e -> assertThat(e.getAddedSugarUom()).as("check addedSugarUom").isEqualTo(actual.getAddedSugarUom()))
            .satisfies(e -> assertThat(e.getAllergenKeywords()).as("check allergenKeywords").isEqualTo(actual.getAllergenKeywords()))
            .satisfies(e -> assertThat(e.getBrandName()).as("check brandName").isEqualTo(actual.getBrandName()))
            .satisfies(e -> assertThat(e.getCalories()).as("check calories").isEqualTo(actual.getCalories()))
            .satisfies(e -> assertThat(e.getCaloriesUom()).as("check caloriesUom").isEqualTo(actual.getCaloriesUom()))
            .satisfies(e -> assertThat(e.getCarbohydrates()).as("check carbohydrates").isEqualTo(actual.getCarbohydrates()))
            .satisfies(e -> assertThat(e.getCarbohydratesUom()).as("check carbohydratesUom").isEqualTo(actual.getCarbohydratesUom()))
            .satisfies(e -> assertThat(e.getCategoryId()).as("check categoryId").isEqualTo(actual.getCategoryId()))
            .satisfies(e -> assertThat(e.getCholesterol()).as("check cholesterol").isEqualTo(actual.getCholesterol()))
            .satisfies(e -> assertThat(e.getCholesterolUOM()).as("check cholesterolUOM").isEqualTo(actual.getCholesterolUOM()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDietaryFiber()).as("check dietaryFiber").isEqualTo(actual.getDietaryFiber()))
            .satisfies(e -> assertThat(e.getDietaryFiberUom()).as("check dietaryFiberUom").isEqualTo(actual.getDietaryFiberUom()))
            .satisfies(e -> assertThat(e.getDistributorId()).as("check distributorId").isEqualTo(actual.getDistributorId()))
            .satisfies(e -> assertThat(e.getgTIN()).as("check gTIN").isEqualTo(actual.getgTIN()))
            .satisfies(e -> assertThat(e.getIngredients()).as("check ingredients").isEqualTo(actual.getIngredients()))
            .satisfies(e -> assertThat(e.getIocCategoryId()).as("check iocCategoryId").isEqualTo(actual.getIocCategoryId()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getIsMerge()).as("check isMerge").isEqualTo(actual.getIsMerge()))
            .satisfies(e -> assertThat(e.getManufacturerId()).as("check manufacturerId").isEqualTo(actual.getManufacturerId()))
            .satisfies(e ->
                assertThat(e.getManufacturerProductCode())
                    .as("check manufacturerProductCode")
                    .isEqualTo(actual.getManufacturerProductCode())
            )
            .satisfies(e -> assertThat(e.getMergeDate()).as("check mergeDate").isEqualTo(actual.getMergeDate()))
            .satisfies(e -> assertThat(e.getProductId()).as("check productId").isEqualTo(actual.getProductId()))
            .satisfies(e -> assertThat(e.getProductLabelPdfUrl()).as("check productLabelPdfUrl").isEqualTo(actual.getProductLabelPdfUrl()))
            .satisfies(e -> assertThat(e.getProductName()).as("check productName").isEqualTo(actual.getProductName()))
            .satisfies(e -> assertThat(e.getProtein()).as("check protein").isEqualTo(actual.getProtein()))
            .satisfies(e -> assertThat(e.getProteinUom()).as("check proteinUom").isEqualTo(actual.getProteinUom()))
            .satisfies(e -> assertThat(e.getSaturatedFat()).as("check saturatedFat").isEqualTo(actual.getSaturatedFat()))
            .satisfies(e -> assertThat(e.getServing()).as("check serving").isEqualTo(actual.getServing()))
            .satisfies(e -> assertThat(e.getServingUom()).as("check servingUom").isEqualTo(actual.getServingUom()))
            .satisfies(e -> assertThat(e.getSodium()).as("check sodium").isEqualTo(actual.getSodium()))
            .satisfies(e -> assertThat(e.getSodiumUom()).as("check sodiumUom").isEqualTo(actual.getSodiumUom()))
            .satisfies(e -> assertThat(e.getStorageTypeId()).as("check storageTypeId").isEqualTo(actual.getStorageTypeId()))
            .satisfies(e -> assertThat(e.getSubCategoryId()).as("check subCategoryId").isEqualTo(actual.getSubCategoryId()))
            .satisfies(e -> assertThat(e.getSugar()).as("check sugar").isEqualTo(actual.getSugar()))
            .satisfies(e -> assertThat(e.getSugarUom()).as("check sugarUom").isEqualTo(actual.getSugarUom()))
            .satisfies(e -> assertThat(e.getTotalFat()).as("check totalFat").isEqualTo(actual.getTotalFat()))
            .satisfies(e -> assertThat(e.getTransFat()).as("check transFat").isEqualTo(actual.getTransFat()))
            .satisfies(e -> assertThat(e.getuPC()).as("check uPC").isEqualTo(actual.getuPC()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()))
            .satisfies(e -> assertThat(e.getVendor()).as("check vendor").isEqualTo(actual.getVendor()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductBeforeApproveUpdatableRelationshipsEquals(ProductBeforeApprove expected, ProductBeforeApprove actual) {
        // empty method
    }
}
