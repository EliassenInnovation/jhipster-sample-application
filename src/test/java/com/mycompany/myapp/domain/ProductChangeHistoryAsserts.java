package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductChangeHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductChangeHistoryAllPropertiesEquals(ProductChangeHistory expected, ProductChangeHistory actual) {
        assertProductChangeHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertProductChangeHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductChangeHistoryAllUpdatablePropertiesEquals(ProductChangeHistory expected, ProductChangeHistory actual) {
        assertProductChangeHistoryUpdatableFieldsEquals(expected, actual);
        assertProductChangeHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductChangeHistoryAutoGeneratedPropertiesEquals(ProductChangeHistory expected, ProductChangeHistory actual) {
        assertThat(expected)
            .as("Verify ProductChangeHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductChangeHistoryUpdatableFieldsEquals(ProductChangeHistory expected, ProductChangeHistory actual) {
        assertThat(expected)
            .as("Verify ProductChangeHistory relevant properties")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getDateCreated()).as("check dateCreated").isEqualTo(actual.getDateCreated()))
            .satisfies(e -> assertThat(e.getHistoryId()).as("check historyId").isEqualTo(actual.getHistoryId()))
            .satisfies(e -> assertThat(e.getIocCategoryId()).as("check iocCategoryId").isEqualTo(actual.getIocCategoryId()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getProductId()).as("check productId").isEqualTo(actual.getProductId()))
            .satisfies(e -> assertThat(e.getSchoolDistrictId()).as("check schoolDistrictId").isEqualTo(actual.getSchoolDistrictId()))
            .satisfies(e -> assertThat(e.getSelectionType()).as("check selectionType").isEqualTo(actual.getSelectionType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductChangeHistoryUpdatableRelationshipsEquals(ProductChangeHistory expected, ProductChangeHistory actual) {
        // empty method
    }
}
