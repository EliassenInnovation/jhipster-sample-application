package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductDistributorAllocationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDistributorAllocationAllPropertiesEquals(
        ProductDistributorAllocation expected,
        ProductDistributorAllocation actual
    ) {
        assertProductDistributorAllocationAutoGeneratedPropertiesEquals(expected, actual);
        assertProductDistributorAllocationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDistributorAllocationAllUpdatablePropertiesEquals(
        ProductDistributorAllocation expected,
        ProductDistributorAllocation actual
    ) {
        assertProductDistributorAllocationUpdatableFieldsEquals(expected, actual);
        assertProductDistributorAllocationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDistributorAllocationAutoGeneratedPropertiesEquals(
        ProductDistributorAllocation expected,
        ProductDistributorAllocation actual
    ) {
        assertThat(expected)
            .as("Verify ProductDistributorAllocation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDistributorAllocationUpdatableFieldsEquals(
        ProductDistributorAllocation expected,
        ProductDistributorAllocation actual
    ) {
        assertThat(expected)
            .as("Verify ProductDistributorAllocation relevant properties")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getDistributorId()).as("check distributorId").isEqualTo(actual.getDistributorId()))
            .satisfies(e -> assertThat(e.getIsAllocated()).as("check isAllocated").isEqualTo(actual.getIsAllocated()))
            .satisfies(e ->
                assertThat(e.getProductDistributorAllocationId())
                    .as("check productDistributorAllocationId")
                    .isEqualTo(actual.getProductDistributorAllocationId())
            )
            .satisfies(e -> assertThat(e.getProductId()).as("check productId").isEqualTo(actual.getProductId()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDistributorAllocationUpdatableRelationshipsEquals(
        ProductDistributorAllocation expected,
        ProductDistributorAllocation actual
    ) {
        // empty method
    }
}
