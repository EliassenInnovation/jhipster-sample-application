package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReplacedProductsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReplacedProductsAllPropertiesEquals(ReplacedProducts expected, ReplacedProducts actual) {
        assertReplacedProductsAutoGeneratedPropertiesEquals(expected, actual);
        assertReplacedProductsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReplacedProductsAllUpdatablePropertiesEquals(ReplacedProducts expected, ReplacedProducts actual) {
        assertReplacedProductsUpdatableFieldsEquals(expected, actual);
        assertReplacedProductsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReplacedProductsAutoGeneratedPropertiesEquals(ReplacedProducts expected, ReplacedProducts actual) {
        assertThat(expected)
            .as("Verify ReplacedProducts auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReplacedProductsUpdatableFieldsEquals(ReplacedProducts expected, ReplacedProducts actual) {
        assertThat(expected)
            .as("Verify ReplacedProducts relevant properties")
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getProductId()).as("check productId").isEqualTo(actual.getProductId()))
            .satisfies(e -> assertThat(e.getReplacedByUserId()).as("check replacedByUserId").isEqualTo(actual.getReplacedByUserId()))
            .satisfies(e -> assertThat(e.getReplacedId()).as("check replacedId").isEqualTo(actual.getReplacedId()))
            .satisfies(e -> assertThat(e.getReplacedProductId()).as("check replacedProductId").isEqualTo(actual.getReplacedProductId()))
            .satisfies(e -> assertThat(e.getReplacementDate()).as("check replacementDate").isEqualTo(actual.getReplacementDate()))
            .satisfies(e -> assertThat(e.getSchoolDistrictId()).as("check schoolDistrictId").isEqualTo(actual.getSchoolDistrictId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReplacedProductsUpdatableRelationshipsEquals(ReplacedProducts expected, ReplacedProducts actual) {
        // empty method
    }
}
