package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RoleMstAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoleMstAllPropertiesEquals(RoleMst expected, RoleMst actual) {
        assertRoleMstAutoGeneratedPropertiesEquals(expected, actual);
        assertRoleMstAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoleMstAllUpdatablePropertiesEquals(RoleMst expected, RoleMst actual) {
        assertRoleMstUpdatableFieldsEquals(expected, actual);
        assertRoleMstUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoleMstAutoGeneratedPropertiesEquals(RoleMst expected, RoleMst actual) {
        assertThat(expected)
            .as("Verify RoleMst auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoleMstUpdatableFieldsEquals(RoleMst expected, RoleMst actual) {
        assertThat(expected)
            .as("Verify RoleMst relevant properties")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getParentRoleId()).as("check parentRoleId").isEqualTo(actual.getParentRoleId()))
            .satisfies(e -> assertThat(e.getRoleId()).as("check roleId").isEqualTo(actual.getRoleId()))
            .satisfies(e -> assertThat(e.getRoleName()).as("check roleName").isEqualTo(actual.getRoleName()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoleMstUpdatableRelationshipsEquals(RoleMst expected, RoleMst actual) {
        // empty method
    }
}
