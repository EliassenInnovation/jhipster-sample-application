package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SchoolDistrictAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolDistrictAllPropertiesEquals(SchoolDistrict expected, SchoolDistrict actual) {
        assertSchoolDistrictAutoGeneratedPropertiesEquals(expected, actual);
        assertSchoolDistrictAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolDistrictAllUpdatablePropertiesEquals(SchoolDistrict expected, SchoolDistrict actual) {
        assertSchoolDistrictUpdatableFieldsEquals(expected, actual);
        assertSchoolDistrictUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolDistrictAutoGeneratedPropertiesEquals(SchoolDistrict expected, SchoolDistrict actual) {
        assertThat(expected)
            .as("Verify SchoolDistrict auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolDistrictUpdatableFieldsEquals(SchoolDistrict expected, SchoolDistrict actual) {
        assertThat(expected)
            .as("Verify SchoolDistrict relevant properties")
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getContractCompany()).as("check contractCompany").isEqualTo(actual.getContractCompany()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getDistrictLogo()).as("check districtLogo").isEqualTo(actual.getDistrictLogo()))
            .satisfies(e -> assertThat(e.getDistrictName()).as("check districtName").isEqualTo(actual.getDistrictName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getFoodServiceOptions()).as("check foodServiceOptions").isEqualTo(actual.getFoodServiceOptions()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedOn()).as("check lastUpdatedOn").isEqualTo(actual.getLastUpdatedOn()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getSchoolDistrictId()).as("check schoolDistrictId").isEqualTo(actual.getSchoolDistrictId()))
            .satisfies(e -> assertThat(e.getSiteCode()).as("check siteCode").isEqualTo(actual.getSiteCode()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolDistrictUpdatableRelationshipsEquals(SchoolDistrict expected, SchoolDistrict actual) {
        // empty method
    }
}
