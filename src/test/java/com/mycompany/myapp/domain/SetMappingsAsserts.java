package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SetMappingsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetMappingsAllPropertiesEquals(SetMappings expected, SetMappings actual) {
        assertSetMappingsAutoGeneratedPropertiesEquals(expected, actual);
        assertSetMappingsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetMappingsAllUpdatablePropertiesEquals(SetMappings expected, SetMappings actual) {
        assertSetMappingsUpdatableFieldsEquals(expected, actual);
        assertSetMappingsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetMappingsAutoGeneratedPropertiesEquals(SetMappings expected, SetMappings actual) {
        assertThat(expected)
            .as("Verify SetMappings auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetMappingsUpdatableFieldsEquals(SetMappings expected, SetMappings actual) {
        assertThat(expected)
            .as("Verify SetMappings relevant properties")
            .satisfies(e -> assertThat(e.getiD()).as("check iD").isEqualTo(actual.getiD()))
            .satisfies(e -> assertThat(e.getOneWorldValue()).as("check oneWorldValue").isEqualTo(actual.getOneWorldValue()))
            .satisfies(e -> assertThat(e.getProductValue()).as("check productValue").isEqualTo(actual.getProductValue()))
            .satisfies(e -> assertThat(e.getSetName()).as("check setName").isEqualTo(actual.getSetName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetMappingsUpdatableRelationshipsEquals(SetMappings expected, SetMappings actual) {
        // empty method
    }
}
