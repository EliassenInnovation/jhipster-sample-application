package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubCategoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubCategoryAllPropertiesEquals(SubCategory expected, SubCategory actual) {
        assertSubCategoryAutoGeneratedPropertiesEquals(expected, actual);
        assertSubCategoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubCategoryAllUpdatablePropertiesEquals(SubCategory expected, SubCategory actual) {
        assertSubCategoryUpdatableFieldsEquals(expected, actual);
        assertSubCategoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubCategoryAutoGeneratedPropertiesEquals(SubCategory expected, SubCategory actual) {
        assertThat(expected)
            .as("Verify SubCategory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubCategoryUpdatableFieldsEquals(SubCategory expected, SubCategory actual) {
        assertThat(expected)
            .as("Verify SubCategory relevant properties")
            .satisfies(e -> assertThat(e.getCategoryId()).as("check categoryId").isEqualTo(actual.getCategoryId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getSubCategoryCode()).as("check subCategoryCode").isEqualTo(actual.getSubCategoryCode()))
            .satisfies(e -> assertThat(e.getSubCategoryId()).as("check subCategoryId").isEqualTo(actual.getSubCategoryId()))
            .satisfies(e -> assertThat(e.getSubCategoryName()).as("check subCategoryName").isEqualTo(actual.getSubCategoryName()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubCategoryUpdatableRelationshipsEquals(SubCategory expected, SubCategory actual) {
        // empty method
    }
}
