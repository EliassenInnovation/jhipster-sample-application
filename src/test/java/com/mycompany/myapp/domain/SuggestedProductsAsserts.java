package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SuggestedProductsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSuggestedProductsAllPropertiesEquals(SuggestedProducts expected, SuggestedProducts actual) {
        assertSuggestedProductsAutoGeneratedPropertiesEquals(expected, actual);
        assertSuggestedProductsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSuggestedProductsAllUpdatablePropertiesEquals(SuggestedProducts expected, SuggestedProducts actual) {
        assertSuggestedProductsUpdatableFieldsEquals(expected, actual);
        assertSuggestedProductsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSuggestedProductsAutoGeneratedPropertiesEquals(SuggestedProducts expected, SuggestedProducts actual) {
        assertThat(expected)
            .as("Verify SuggestedProducts auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSuggestedProductsUpdatableFieldsEquals(SuggestedProducts expected, SuggestedProducts actual) {
        assertThat(expected)
            .as("Verify SuggestedProducts relevant properties")
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getIsApprove()).as("check isApprove").isEqualTo(actual.getIsApprove()))
            .satisfies(e -> assertThat(e.getProductId()).as("check productId").isEqualTo(actual.getProductId()))
            .satisfies(e ->
                assertThat(e.getSuggestedByDistrict()).as("check suggestedByDistrict").isEqualTo(actual.getSuggestedByDistrict())
            )
            .satisfies(e -> assertThat(e.getSuggestedByUserId()).as("check suggestedByUserId").isEqualTo(actual.getSuggestedByUserId()))
            .satisfies(e -> assertThat(e.getSuggestedProductId()).as("check suggestedProductId").isEqualTo(actual.getSuggestedProductId()))
            .satisfies(e -> assertThat(e.getSuggestionDate()).as("check suggestionDate").isEqualTo(actual.getSuggestionDate()))
            .satisfies(e -> assertThat(e.getSuggestionId()).as("check suggestionId").isEqualTo(actual.getSuggestionId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSuggestedProductsUpdatableRelationshipsEquals(SuggestedProducts expected, SuggestedProducts actual) {
        // empty method
    }
}
