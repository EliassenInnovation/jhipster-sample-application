package com.mycompany.myapp.domain;

import java.util.Random;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicLong;

public class USDAUpdateMstTestSamples {

    private static final Random random = new Random();
    private static final AtomicLong longCount = new AtomicLong(random.nextInt() + (2 * Integer.MAX_VALUE));

    public static USDAUpdateMst getUSDAUpdateMstSample1() {
        return new USDAUpdateMst()
            .id(1L)
            .addedSugarsgperServing("addedSugarsgperServing1")
            .allAllergens("allAllergens1")
            .brandName("brandName1")
            .calorieskcalperServing("calorieskcalperServing1")
            .cholesterolmgperServing("cholesterolmgperServing1")
            .cNCredited("cNCredited1")
            .cNCrediting("cNCrediting1")
            .cNExpirationDate("cNExpirationDate1")
            .cNLabelDocument("cNLabelDocument1")
            .cNProductIdentification("cNProductIdentification1")
            .cNQualified("cNQualified1")
            .cNQualifierCode("cNQualifierCode1")
            .dietaryFibergperServing("dietaryFibergperServing1")
            .eggs("eggs1")
            .fish("fish1")
            .foodCategory("foodCategory1")
            .functionalname("functionalname1")
            .gtin("gtin1")
            .halal("halal1")
            .hierarchicalPlacement("hierarchicalPlacement1")
            .informationProvider("informationProvider1")
            .ironFemgperServing("ironFemgperServing1")
            .kosher("kosher1")
            .longdescription("longdescription1")
            .milk("milk1")
            .nutrientFormatTypeCodeReferenceCode("nutrientFormatTypeCodeReferenceCode1")
            .nutrientQuantityBasisTypeCode("nutrientQuantityBasisTypeCode1")
            .nutrientQuantityBasisUnitofMeasure("nutrientQuantityBasisUnitofMeasure1")
            .nutrientQuantityBasisValue("nutrientQuantityBasisValue1")
            .peanuts("peanuts1")
            .pFSCreditableIngredientTypeCode("pFSCreditableIngredientTypeCode1")
            .pFSDocument("pFSDocument1")
            .pFSTotalCreditableIngredientAmount("pFSTotalCreditableIngredientAmount1")
            .pFSTotalPortionWeight("pFSTotalPortionWeight1")
            .potassiumKmgperServing("potassiumKmgperServing1")
            .preparationStateCode("preparationStateCode1")
            .productFormulationStatement("productFormulationStatement1")
            .proteingperServing("proteingperServing1")
            .servingDescription("servingDescription1")
            .servingSize("servingSize1")
            .servingUnitofMeasure("servingUnitofMeasure1")
            .servingsPerCase("servingsPerCase1")
            .sesame("sesame1")
            .shellfish("shellfish1")
            .shortdescription("shortdescription1")
            .sodiummgperServing("sodiummgperServing1")
            .soybeans("soybeans1")
            .sugarsgperServing("sugarsgperServing1")
            .totalFatgperServing("totalFatgperServing1")
            .tradeChannels("tradeChannels1")
            .transFatgperServing("transFatgperServing1")
            .treeNuts("treeNuts1")
            .uSDAFoodsMaterialCode("uSDAFoodsMaterialCode1")
            .uSDAFoodsProductsDescription("uSDAFoodsProductsDescription1")
            .vendorName("vendorName1")
            .vendorID("vendorID1")
            .vitaminDmcgperServing("vitaminDmcgperServing1")
            .wheat("wheat1");
    }

    public static USDAUpdateMst getUSDAUpdateMstSample2() {
        return new USDAUpdateMst()
            .id(2L)
            .addedSugarsgperServing("addedSugarsgperServing2")
            .allAllergens("allAllergens2")
            .brandName("brandName2")
            .calorieskcalperServing("calorieskcalperServing2")
            .cholesterolmgperServing("cholesterolmgperServing2")
            .cNCredited("cNCredited2")
            .cNCrediting("cNCrediting2")
            .cNExpirationDate("cNExpirationDate2")
            .cNLabelDocument("cNLabelDocument2")
            .cNProductIdentification("cNProductIdentification2")
            .cNQualified("cNQualified2")
            .cNQualifierCode("cNQualifierCode2")
            .dietaryFibergperServing("dietaryFibergperServing2")
            .eggs("eggs2")
            .fish("fish2")
            .foodCategory("foodCategory2")
            .functionalname("functionalname2")
            .gtin("gtin2")
            .halal("halal2")
            .hierarchicalPlacement("hierarchicalPlacement2")
            .informationProvider("informationProvider2")
            .ironFemgperServing("ironFemgperServing2")
            .kosher("kosher2")
            .longdescription("longdescription2")
            .milk("milk2")
            .nutrientFormatTypeCodeReferenceCode("nutrientFormatTypeCodeReferenceCode2")
            .nutrientQuantityBasisTypeCode("nutrientQuantityBasisTypeCode2")
            .nutrientQuantityBasisUnitofMeasure("nutrientQuantityBasisUnitofMeasure2")
            .nutrientQuantityBasisValue("nutrientQuantityBasisValue2")
            .peanuts("peanuts2")
            .pFSCreditableIngredientTypeCode("pFSCreditableIngredientTypeCode2")
            .pFSDocument("pFSDocument2")
            .pFSTotalCreditableIngredientAmount("pFSTotalCreditableIngredientAmount2")
            .pFSTotalPortionWeight("pFSTotalPortionWeight2")
            .potassiumKmgperServing("potassiumKmgperServing2")
            .preparationStateCode("preparationStateCode2")
            .productFormulationStatement("productFormulationStatement2")
            .proteingperServing("proteingperServing2")
            .servingDescription("servingDescription2")
            .servingSize("servingSize2")
            .servingUnitofMeasure("servingUnitofMeasure2")
            .servingsPerCase("servingsPerCase2")
            .sesame("sesame2")
            .shellfish("shellfish2")
            .shortdescription("shortdescription2")
            .sodiummgperServing("sodiummgperServing2")
            .soybeans("soybeans2")
            .sugarsgperServing("sugarsgperServing2")
            .totalFatgperServing("totalFatgperServing2")
            .tradeChannels("tradeChannels2")
            .transFatgperServing("transFatgperServing2")
            .treeNuts("treeNuts2")
            .uSDAFoodsMaterialCode("uSDAFoodsMaterialCode2")
            .uSDAFoodsProductsDescription("uSDAFoodsProductsDescription2")
            .vendorName("vendorName2")
            .vendorID("vendorID2")
            .vitaminDmcgperServing("vitaminDmcgperServing2")
            .wheat("wheat2");
    }

    public static USDAUpdateMst getUSDAUpdateMstRandomSampleGenerator() {
        return new USDAUpdateMst()
            .id(longCount.incrementAndGet())
            .addedSugarsgperServing(UUID.randomUUID().toString())
            .allAllergens(UUID.randomUUID().toString())
            .brandName(UUID.randomUUID().toString())
            .calorieskcalperServing(UUID.randomUUID().toString())
            .cholesterolmgperServing(UUID.randomUUID().toString())
            .cNCredited(UUID.randomUUID().toString())
            .cNCrediting(UUID.randomUUID().toString())
            .cNExpirationDate(UUID.randomUUID().toString())
            .cNLabelDocument(UUID.randomUUID().toString())
            .cNProductIdentification(UUID.randomUUID().toString())
            .cNQualified(UUID.randomUUID().toString())
            .cNQualifierCode(UUID.randomUUID().toString())
            .dietaryFibergperServing(UUID.randomUUID().toString())
            .eggs(UUID.randomUUID().toString())
            .fish(UUID.randomUUID().toString())
            .foodCategory(UUID.randomUUID().toString())
            .functionalname(UUID.randomUUID().toString())
            .gtin(UUID.randomUUID().toString())
            .halal(UUID.randomUUID().toString())
            .hierarchicalPlacement(UUID.randomUUID().toString())
            .informationProvider(UUID.randomUUID().toString())
            .ironFemgperServing(UUID.randomUUID().toString())
            .kosher(UUID.randomUUID().toString())
            .longdescription(UUID.randomUUID().toString())
            .milk(UUID.randomUUID().toString())
            .nutrientFormatTypeCodeReferenceCode(UUID.randomUUID().toString())
            .nutrientQuantityBasisTypeCode(UUID.randomUUID().toString())
            .nutrientQuantityBasisUnitofMeasure(UUID.randomUUID().toString())
            .nutrientQuantityBasisValue(UUID.randomUUID().toString())
            .peanuts(UUID.randomUUID().toString())
            .pFSCreditableIngredientTypeCode(UUID.randomUUID().toString())
            .pFSDocument(UUID.randomUUID().toString())
            .pFSTotalCreditableIngredientAmount(UUID.randomUUID().toString())
            .pFSTotalPortionWeight(UUID.randomUUID().toString())
            .potassiumKmgperServing(UUID.randomUUID().toString())
            .preparationStateCode(UUID.randomUUID().toString())
            .productFormulationStatement(UUID.randomUUID().toString())
            .proteingperServing(UUID.randomUUID().toString())
            .servingDescription(UUID.randomUUID().toString())
            .servingSize(UUID.randomUUID().toString())
            .servingUnitofMeasure(UUID.randomUUID().toString())
            .servingsPerCase(UUID.randomUUID().toString())
            .sesame(UUID.randomUUID().toString())
            .shellfish(UUID.randomUUID().toString())
            .shortdescription(UUID.randomUUID().toString())
            .sodiummgperServing(UUID.randomUUID().toString())
            .soybeans(UUID.randomUUID().toString())
            .sugarsgperServing(UUID.randomUUID().toString())
            .totalFatgperServing(UUID.randomUUID().toString())
            .tradeChannels(UUID.randomUUID().toString())
            .transFatgperServing(UUID.randomUUID().toString())
            .treeNuts(UUID.randomUUID().toString())
            .uSDAFoodsMaterialCode(UUID.randomUUID().toString())
            .uSDAFoodsProductsDescription(UUID.randomUUID().toString())
            .vendorName(UUID.randomUUID().toString())
            .vendorID(UUID.randomUUID().toString())
            .vitaminDmcgperServing(UUID.randomUUID().toString())
            .wheat(UUID.randomUUID().toString());
    }
}
