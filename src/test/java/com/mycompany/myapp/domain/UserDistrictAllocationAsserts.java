package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserDistrictAllocationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDistrictAllocationAllPropertiesEquals(UserDistrictAllocation expected, UserDistrictAllocation actual) {
        assertUserDistrictAllocationAutoGeneratedPropertiesEquals(expected, actual);
        assertUserDistrictAllocationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDistrictAllocationAllUpdatablePropertiesEquals(
        UserDistrictAllocation expected,
        UserDistrictAllocation actual
    ) {
        assertUserDistrictAllocationUpdatableFieldsEquals(expected, actual);
        assertUserDistrictAllocationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDistrictAllocationAutoGeneratedPropertiesEquals(
        UserDistrictAllocation expected,
        UserDistrictAllocation actual
    ) {
        assertThat(expected)
            .as("Verify UserDistrictAllocation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDistrictAllocationUpdatableFieldsEquals(UserDistrictAllocation expected, UserDistrictAllocation actual) {
        assertThat(expected)
            .as("Verify UserDistrictAllocation relevant properties")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getIsAllocated()).as("check isAllocated").isEqualTo(actual.getIsAllocated()))
            .satisfies(e -> assertThat(e.getSchoolDistrictId()).as("check schoolDistrictId").isEqualTo(actual.getSchoolDistrictId()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()))
            .satisfies(e ->
                assertThat(e.getUserDistrictAllocationId())
                    .as("check userDistrictAllocationId")
                    .isEqualTo(actual.getUserDistrictAllocationId())
            )
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDistrictAllocationUpdatableRelationshipsEquals(
        UserDistrictAllocation expected,
        UserDistrictAllocation actual
    ) {
        // empty method
    }
}
