package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserMstAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserMstAllPropertiesEquals(UserMst expected, UserMst actual) {
        assertUserMstAutoGeneratedPropertiesEquals(expected, actual);
        assertUserMstAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserMstAllUpdatablePropertiesEquals(UserMst expected, UserMst actual) {
        assertUserMstUpdatableFieldsEquals(expected, actual);
        assertUserMstUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserMstAutoGeneratedPropertiesEquals(UserMst expected, UserMst actual) {
        assertThat(expected)
            .as("Verify UserMst auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserMstUpdatableFieldsEquals(UserMst expected, UserMst actual) {
        assertThat(expected)
            .as("Verify UserMst relevant properties")
            .satisfies(e -> assertThat(e.getAddressLine1()).as("check addressLine1").isEqualTo(actual.getAddressLine1()))
            .satisfies(e -> assertThat(e.getAddressLine2()).as("check addressLine2").isEqualTo(actual.getAddressLine2()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getCoverImage()).as("check coverImage").isEqualTo(actual.getCoverImage()))
            .satisfies(e -> assertThat(e.getCreateBy()).as("check createBy").isEqualTo(actual.getCreateBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getManufacturerId()).as("check manufacturerId").isEqualTo(actual.getManufacturerId()))
            .satisfies(e -> assertThat(e.getMobile()).as("check mobile").isEqualTo(actual.getMobile()))
            .satisfies(e -> assertThat(e.getObjectId()).as("check objectId").isEqualTo(actual.getObjectId()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getProfileImage()).as("check profileImage").isEqualTo(actual.getProfileImage()))
            .satisfies(e -> assertThat(e.getRoleId()).as("check roleId").isEqualTo(actual.getRoleId()))
            .satisfies(e -> assertThat(e.getSchoolDistrictId()).as("check schoolDistrictId").isEqualTo(actual.getSchoolDistrictId()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getZipCode()).as("check zipCode").isEqualTo(actual.getZipCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserMstUpdatableRelationshipsEquals(UserMst expected, UserMst actual) {
        // empty method
    }
}
